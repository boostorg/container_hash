name: GitHub Actions CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - githubactions*
      - feature/**
      - fix/**
      - pr/**

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "USER_CONFIG=using gcc : : g++-4.8 ; CXXSTD= Job 0"
            buildtype: "boost"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            container: "ubuntu:14.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            user_config: "using gcc : : g++-4.8 ;"
            cxxstd: "03,11"
          - name: "USER_CONFIG=using gcc : : g++-7 ; CXXSTD=11 Job 1"
            buildtype: "boost"
            packages: "g++-7"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++-7"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            user_config: "using gcc : : g++-7 ;"
            cxxstd: "11,14,17"
          - name: "USER_CONFIG=using clang : : clang++ ; CXXST Job 2"
            buildtype: "boost"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            user_config: "using clang : : clang++ ;"
            cxxstd: "03,11"
          - name: "USER_CONFIG=using clang : : clang++ -D_HAS_A Job 3"
            buildtype: "boost"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            user_config: "using clang : : clang++ -D_HAS_AUTO_PTR_ETC=0 ;"
            cxxstd: "11"

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Check if running in container
        if: matrix.container != ''
        run: echo "GHA_CONTAINER=${{ matrix.container }}" >> $GITHUB_ENV
      - name: If running in container, upgrade packages
        if: matrix.container != ''
        run: |
            sudo apt-get -o Acquire::Retries=3 update && DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata && apt-get -o Acquire::Retries=3 install -y sudo software-properties-common wget curl apt-transport-https make apt-file sudo unzip libssl-dev build-essential autotools-dev autoconf automake g++ libc++-helpers python python-pip ruby cpio gcc-multilib g++-multilib pkgconf python3 python3-pip ccache libpython-dev
            sudo apt-add-repository ppa:git-core/ppa
            sudo apt-get -o Acquire::Retries=3 update && apt-get -o Acquire::Retries=3 -y install git
            sudo python -m pip install --upgrade pip==20.3.4
            sudo /usr/local/bin/pip install cmake

      - uses: actions/checkout@v2

      - name: linux
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          PACKAGES_TO_REMOVE: ${{ matrix.packages_to_remove }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          USER_CONFIG: ${{ matrix.user_config }}
          CXXSTD: ${{ matrix.cxxstd }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "linux"
        run: |
          echo '==================================> SETUP'
          echo '==================================> PACKAGES'
          set -e
          if [ -n "$PACKAGES_TO_REMOVE" ]; then sudo apt-get purge -y $PACKAGES_TO_REMOVE; fi
          echo ">>>>> APT: REPO.."
          for i in {1..3}; do sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test" && break || sleep 2; done
          
          if test -n "${LLVM_OS}" ; then
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
              if test -n "${LLVM_VER}" ; then
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS}-${LLVM_VER} main"
              else
                  # Snapshot (i.e. trunk) build of clang
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS} main"
              fi
          fi
          echo ">>>>> APT: UPDATE.."
          sudo -E apt-get -o Acquire::Retries=3 update
          if test -n "${SOURCES}" ; then
              echo ">>>>> APT: INSTALL SOURCES.."
              for SOURCE in $SOURCES; do
                  sudo -E apt-add-repository ppa:$SOURCE
              done
          fi
          echo ">>>>> APT: INSTALL ${PACKAGES}.."
          sudo -E DEBIAN_FRONTEND=noninteractive apt-get -o Acquire::Retries=3 -y --no-install-suggests --no-install-recommends install ${PACKAGES}

          echo '==================================> INSTALL AND COMPILE'
          set -e
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH

          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'

          export BOOST_VERSION=1.67.0
          export BOOST_FILENAME=boost_1_67_0
          export BOOST_ROOT=${HOME}/boost
          cd ${TRAVIS_BUILD_DIR}
          touch Jamroot.jam
          cd $HOME
          echo $USER_CONFIG > ~/user-config.jam
          cat ~/user-config.jam
          mkdir $HOME/download
          mkdir $HOME/extract
          cd $HOME/download
          if [ "$TRAVIS_EVENT_TYPE" == "cron" ]
          then
              if [ "$TRAVIS_BRANCH" == "master" ]
              then
                  snapshot_branch=master
              else
                  snapshot_branch=develop
              fi
              download_url=$(curl https://api.bintray.com/packages/boostorg/$snapshot_branch/snapshot/files |
                      python -c "import os.path, sys, json; x = json.load(sys.stdin); print '\n'.join(a['path'] for a in x if os.path.splitext(a['path'])[1] == '.bz2')" |
                      head -n 1 |
                      sed "s/^/http:\/\/dl.bintray.com\/boostorg\/$snapshot_branch\//")
          else
              download_url=https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/${BOOST_FILENAME}.tar.bz2/download
          fi
          echo "Downloading ${download_url}"
          wget -O boost.tar.bz2 $download_url
          cd $HOME/extract
          tar -xjf $HOME/download/boost.tar.bz2
          mv * ${BOOST_ROOT}

          rm -r ${BOOST_ROOT}/boost/functional
          cd ${BOOST_ROOT}/tools/build
          mkdir ${HOME}/opt
          ./bootstrap.sh
          ./b2 install --prefix=$HOME/opt

          echo '==================================> SCRIPT'

          cd ${TRAVIS_BUILD_DIR}/test
          ${HOME}/opt/bin/b2 --verbose-test -j 3 cxxstd=$CXXSTD -q ${BJAM_TOOLSET} include=${BOOST_ROOT} include=${TRAVIS_BUILD_DIR}/include hash_info
          ${HOME}/opt/bin/b2 -j 3 cxxstd=$CXXSTD -q ${BJAM_TOOLSET} include=${BOOST_ROOT} include=${TRAVIS_BUILD_DIR}/include

          fi
